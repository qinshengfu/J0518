<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="AccountMapper">

    <!--表名 -->
    <sql id="tableName">
		"FT_ACCOUNT"
	</sql>

    <!-- 字段 -->
    <sql id="Field">
		"GMT_CREATE",	
		"GMT_MODIFIED",	
		"PHONE",	
		"LOGIN_PASSWORD",	
		"SECURITY_PASSWORD",	
		"USDT_WALLET",
		"MONEY",	
		"SHOP_INTEGRAL",	
		"RECOMMENDED_NUMBER",	
		"TEAM_NUMBER",	
		"RECOMMENDER_ID",	
		"RECOMMENDER",	
		"RE_PATH",	
		"ALGEBRA",	
		"USER_RANK",	
		"USER_STATE",	
		"PROVINCE_ID",	
		"PROVINCE",	
		"CITY_ID",	
		"CITY",	
		"AREA_ID",	
		"AREA",	
		"MY_ADDRESS",	
		"IS_SPECIAL",	
		"IS_REAL",	
		"ACCOUNT_ID"
	</sql>

    <!-- 字段值 -->
    <sql id="FieldValue">
			#{GMT_CREATE},	
			#{GMT_MODIFIED},	
			#{PHONE},	
			#{LOGIN_PASSWORD},	
			#{SECURITY_PASSWORD},	
			#{USDT_WALLET},
			#{MONEY},	
			#{SHOP_INTEGRAL},	
			#{RECOMMENDED_NUMBER},	
			#{TEAM_NUMBER},	
			#{RECOMMENDER_ID},	
			#{RECOMMENDER},	
			#{RE_PATH},	
			#{ALGEBRA},	
			#{USER_RANK},	
			#{USER_STATE},	
			#{PROVINCE_ID},	
			#{PROVINCE},	
			#{CITY_ID},	
			#{CITY},	
			#{AREA_ID},	
			#{AREA},	
			#{MY_ADDRESS},	
			#{IS_SPECIAL},	
			#{IS_REAL},	
			#{ACCOUNT_ID}
	</sql>

    <!-- 新增-->
    <insert id="save" parameterType="pd">

        /* 返回 主键ID*/
        <selectKey keyProperty="ACCOUNT_ID" order="BEFORE" resultType="java.lang.Integer">
            select FT_ACCOUNT_SEQ.NEXTVAL as ACCOUNT_ID from DUAL
        </selectKey>

        insert into
        <include refid="tableName"></include>
        (
        <include refid="Field"></include>
        ) values (
        <include refid="FieldValue"></include>
        )
    </insert>

    <!-- 删除-->
    <delete id="delete" parameterType="pd">
        delete from
        <include refid="tableName"></include>
        where
        "ACCOUNT_ID" = #{ACCOUNT_ID}
    </delete>

    <!-- 修改 -->
    <update id="edit" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        <foreach item="item" collection="_parameter.keys"
                 separator="," close="">
            <if test="item != null and item != '' ">
                ${item} = #{[${item}]}
            </if>
        </foreach>
        where
        "ACCOUNT_ID" = #{ACCOUNT_ID}
    </update>

    <!-- 增加推荐人数 -->
    <update id="addRecommendQuantity" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        "RECOMMENDED_NUMBER" = "RECOMMENDED_NUMBER" + 1
        where
        "ACCOUNT_ID" = #{ACCOUNT_ID}
    </update>

    <!-- 增加团队人数 -->
    <update id="addTeamAmount" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        "TEAM_NUMBER" = "TEAM_NUMBER" + 1
        where
        "ACCOUNT_ID" in (#{RE_PATH})
    </update>

    <!-- 增加usdt数量 -->
    <update id="addUsdt" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        "USDT_WALLET" = "USDT_WALLET" + #{money}
        where
        "ACCOUNT_ID" = #{ACCOUNT_ID}
    </update>

    <!-- 减少usdt数量 -->
    <update id="reduceUsdt" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        "USDT_WALLET" = "USDT_WALLET" - #{money}
        where
        "ACCOUNT_ID" = #{ACCOUNT_ID}
    </update>

    <!-- 增加金额数量 -->
    <update id="addMoney" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        "MONEY" = "MONEY" + #{money}
        where
        "ACCOUNT_ID" = #{ACCOUNT_ID}
    </update>

    <!-- 减少金额数量 -->
    <update id="reduceMoney" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        "MONEY" = "MONEY" - #{money}
        where
        "ACCOUNT_ID" = #{ACCOUNT_ID}
    </update>

    <!-- 增加商城积分 -->
    <update id="addIntegral" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        "SHOP_INTEGRAL" = "SHOP_INTEGRAL" + #{money}
        where
        "ACCOUNT_ID" = #{ACCOUNT_ID}
    </update>

    <!-- 减少商城积分 -->
    <update id="reduceIntegral" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        "SHOP_INTEGRAL" = "SHOP_INTEGRAL" - #{money}
        where
        "ACCOUNT_ID" = #{ACCOUNT_ID}
    </update>

    <!-- 通过ID获取数据 -->
    <select id="findById" parameterType="pd" resultType="pd">
        select
        <include refid="Field"/>
        from
        <include refid="tableName"/>
        where "ACCOUNT_ID" = #{ACCOUNT_ID}
    </select>

    <!-- 通过手机号获取数据 -->
    <select id="findByPhone" parameterType="pd" resultType="pd">
        SELECT
        *
        FROM
        FT_ACCOUNT t1,
        FT_ACCOUNT_DATA t2
        WHERE
        t1.ACCOUNT_ID = t2.USER_ID
        AND t1.PHONE = #{PHONE}
    </select>

    <!-- 通过手机号和密码获取数据 -->
    <select id="findByPhoneAndPass" parameterType="pd" resultType="MemUser">
        select
        <include refid="Field"/>
        from
        <include refid="tableName"/>
        where "PHONE" = #{PHONE}
        and "LOGIN_PASSWORD" = #{LOGIN_PASSWORD}
    </select>

    <!-- 列表 -->
    <select id="datalistPage" parameterType="page" resultType="pd">
        select
        <include refid="Field"/>
        from
        <include refid="tableName"/>
        where 1=1
        <if test="pd.keywords!= null and pd.keywords != ''"><!-- 关键词检索 -->
            and
            (
            <!--	根据需求自己加检索条件 -->
            "PHONE" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
            or
            "PROVINCE" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
            or
            "CITY" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
            or
            "AREA" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
            or
            "RECOMMENDER" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
            )
        </if>
        /*时间段搜索*/
        <if test="pd.lastStart != null and pd.lastStart != '' ">
            and "GMT_CREATE" &gt;= #{pd.lastStart}
        </if>
        <if test="pd.lastEnd!= null and pd.lastEnd != '' ">
            and "GMT_CREATE" &lt;= ( SELECT TO_CHAR(( SELECT to_date( #{pd.lastEnd}, 'yyyy-mm-dd' ) + 1 FROM dual ),
            'yyyy-mm-dd' ) FROM dual )
        </if>
        ORDER BY "GMT_CREATE" DESC
    </select>

    <!-- 列表(财务汇总) -->
    <select id="listByFinancialSummary" parameterType="page" resultType="pd">
        select
        t1.TIME,
        t1.PHONE as PHONE1,
        t1.TEAM_SHARES_SUM,
        t2.PHONE as PHONE2,
        t2.TEAM_DAY_TRADING,
        t3.PHONE as PHONE3,
        t3.TEAM_WITHDRAW,
        t4.PHONE as PHONE4,
        t4.TEAM_RECHARGE
        from (
        SELECT
        t1.TIME AS TIME,
        t2.PHONE,
        nvl( t2.TEAM_SHARES_SUM, 0 ) AS TEAM_SHARES_SUM
        FROM
        (
        SELECT
        to_char( to_date( #{pd.lastStart}, 'yyyy-mm-dd' ) + ROWNUM - 1, 'yyyy-mm-dd' ) AS "TIME"
        FROM
        dual
        <if test="pd.lastStart != null and pd.lastStart != '' and pd.lastEnd!= null and pd.lastEnd != '' ">
            CONNECT BY ROWNUM &lt;= trunc(
            to_date( #{pd.lastEnd}, 'yyyy-mm-dd' ) - to_date( #{pd.lastStart}, 'yyyy-mm-dd' )) + 1
        </if>
        ) t1
        LEFT JOIN (
        SELECT
        "CREATE_TIME",
        "PHONE",
        NVL( SUM( REMAINDER ), 0 ) AS TEAM_SHARES_SUM
        FROM
        (
        SELECT
        to_char( to_date( t1."GMT_CREATE", 'yyyy-MM-dd hh24:mi:ss' ), 'yyyy-MM-dd' ) AS CREATE_TIME,
        t1."REMAINDER",
        t1."STATUS",
        t2."PHONE"
        FROM
        "FT_SHARES_ORDER" t1, FT_ACCOUNT t2
        WHERE
        t1."GMT_CREATE" &gt;= to_char( to_date( #{pd.lastStart}, 'yyyy-MM-dd' ), 'yyyy-MM-dd' )
        <if test="pd.lastEnd!= null and pd.lastEnd != '' ">
            AND t1."GMT_CREATE" &lt;= to_char( to_date( #{pd.lastEnd}, 'yyyy-MM-dd' ) + 1, 'yyyy-MM-dd' )
        </if>
        AND	t1."PHONE" IN (
        SELECT PHONE FROM FT_ACCOUNT WHERE "RE_PATH" LIKE CONCAT( CONCAT( '%', (SELECT ACCOUNT_ID FROM FT_ACCOUNT WHERE PHONE = t2.PHONE) ), '%' )
        )
        )
        WHERE
        "STATUS" = '持仓'
        GROUP BY
        "CREATE_TIME",
        PHONE
        ) t2 ON t1."TIME" = t2."CREATE_TIME"
        ) t1,
        (
        SELECT
        t1.TIME AS TIME,
        t2.PHONE,
        nvl( t2.TEAM_DAY_TRADING, 0 ) AS TEAM_DAY_TRADING
        FROM
        (
        SELECT
        to_char( to_date( #{pd.lastStart}, 'yyyy-mm-dd' ) + ROWNUM - 1, 'yyyy-mm-dd' ) AS "TIME"
        FROM
        dual
        <if test="pd.lastStart != null and pd.lastStart != '' and pd.lastEnd!= null and pd.lastEnd != '' ">
            CONNECT BY ROWNUM &lt;= trunc(
            to_date( #{pd.lastEnd}, 'yyyy-mm-dd' ) - to_date( #{pd.lastStart}, 'yyyy-mm-dd' )) + 1
        </if>
        ) t1
        LEFT JOIN (
        SELECT
        "CREATE_TIME",
        "PHONE",
        NVL( SUM( ( PRICE *  REMAINDER) ), 0 ) AS TEAM_DAY_TRADING
        FROM
        (
        SELECT
        to_char( to_date( t1."GMT_CREATE", 'yyyy-MM-dd hh24:mi:ss' ), 'yyyy-MM-dd' ) AS CREATE_TIME,
        t1."REMAINDER",
        t1."STATUS",
        t1."PRICE",
        t1."EVENT",
        t2."PHONE"
        FROM
        "FT_SHARES_ORDER" t1, FT_ACCOUNT t2
        WHERE
        t1."GMT_CREATE" &gt;= to_char( to_date( #{pd.lastStart}, 'yyyy-MM-dd' ), 'yyyy-MM-dd' )
        <if test="pd.lastEnd!= null and pd.lastEnd != '' ">
            AND t1."GMT_CREATE" &lt;= to_char( to_date( #{pd.lastEnd}, 'yyyy-MM-dd' ) + 1, 'yyyy-MM-dd' )
        </if>
        AND	t1."PHONE" IN (
        SELECT PHONE FROM FT_ACCOUNT WHERE "RE_PATH" LIKE CONCAT( CONCAT( '%', (SELECT ACCOUNT_ID FROM FT_ACCOUNT WHERE PHONE = t2.PHONE) ), '%' )
        )
        )
        WHERE
        ( EVENT = '交易成功' OR EVENT = '购买限量发售股票' )
        GROUP BY
        "CREATE_TIME",
        PHONE
        ) t2 ON t1."TIME" = t2."CREATE_TIME"
        ) t2,
        (
        SELECT
        t1.TIME AS TIME,
        t2.PHONE,
        nvl( t2.TEAM_WITHDRAW, 0 ) AS TEAM_WITHDRAW
        FROM
        (
        SELECT
        to_char( to_date( #{pd.lastStart}, 'yyyy-mm-dd' ) + ROWNUM - 1, 'yyyy-mm-dd' ) AS "TIME"
        FROM
        dual
        <if test="pd.lastStart != null and pd.lastStart != '' and pd.lastEnd!= null and pd.lastEnd != '' ">
            CONNECT BY ROWNUM &lt;= trunc(
            to_date( #{pd.lastEnd}, 'yyyy-mm-dd' ) - to_date( #{pd.lastStart}, 'yyyy-mm-dd' )) + 1
        </if>
        ) t1
        LEFT JOIN (
        SELECT
        "CREATE_TIME",
        "PHONE",
        NVL(	SUM(ACTUAL_RECEIPT) , 0) AS TEAM_WITHDRAW
        FROM
        (
        SELECT
        to_char( to_date( t1."GMT_CREATE", 'yyyy-MM-dd hh24:mi:ss' ), 'yyyy-MM-dd' ) AS CREATE_TIME,
        t1."ACTUAL_RECEIPT",
        t1."DATA_TYPE",
        t1."USER_ID",
        t2."PHONE"
        FROM
        "FT_USDT_RECORD" t1, FT_ACCOUNT t2
        WHERE
        t1."GMT_CREATE" &gt;= to_char( to_date( #{pd.lastStart}, 'yyyy-MM-dd' ), 'yyyy-MM-dd' )
        <if test="pd.lastEnd!= null and pd.lastEnd != '' ">
            AND t1."GMT_CREATE" &lt;= to_char( to_date( #{pd.lastEnd}, 'yyyy-MM-dd' ) + 1, 'yyyy-MM-dd' )
        </if>
        AND	t1.PHONE IN (
        SELECT PHONE FROM FT_ACCOUNT WHERE "RE_PATH" LIKE CONCAT( CONCAT( '%', t2.ACCOUNT_ID ), '%' )
        )
        )
        WHERE
        DATA_TYPE = '提现'
        GROUP BY
        "CREATE_TIME",
        PHONE
        ) t2 ON t1."TIME" = t2."CREATE_TIME"
        ) t3,
        (
        SELECT
        t1.TIME AS TIME,
        t2.PHONE,
        nvl( t2.TEAM_RECHARGE, 0 ) AS TEAM_RECHARGE
        FROM
        (
        SELECT
        to_char( to_date( #{pd.lastStart}, 'yyyy-mm-dd' ) + ROWNUM - 1, 'yyyy-mm-dd' ) AS "TIME"
        FROM
        dual
        <if test="pd.lastStart != null and pd.lastStart != '' and pd.lastEnd!= null and pd.lastEnd != '' ">
            CONNECT BY ROWNUM &lt;= trunc(
            to_date( #{pd.lastEnd}, 'yyyy-mm-dd' ) - to_date( #{pd.lastStart}, 'yyyy-mm-dd' )) + 1
        </if>
        ) t1
        LEFT JOIN (
        SELECT
        "CREATE_TIME",
        "PHONE",
        NVL(	SUM(ACTUAL_RECEIPT) , 0) AS TEAM_RECHARGE
        FROM
        (
        SELECT
        to_char( to_date( t1."GMT_CREATE", 'yyyy-MM-dd hh24:mi:ss' ), 'yyyy-MM-dd' ) AS CREATE_TIME,
        t1."ACTUAL_RECEIPT",
        t1."DATA_TYPE",
        t1."USER_ID",
        t2."PHONE"
        FROM
        "FT_USDT_RECORD" t1, FT_ACCOUNT t2
        WHERE
        t1."GMT_CREATE" &gt;= to_char( to_date( #{pd.lastStart}, 'yyyy-MM-dd' ), 'yyyy-MM-dd' )
        <if test="pd.lastEnd!= null and pd.lastEnd != '' ">
            AND t1."GMT_CREATE" &lt;= to_char( to_date( #{pd.lastEnd}, 'yyyy-MM-dd' ) + 1, 'yyyy-MM-dd' )
        </if>
        AND	t1.PHONE IN (
        SELECT PHONE FROM FT_ACCOUNT WHERE "RE_PATH" LIKE CONCAT( CONCAT( '%', t2.ACCOUNT_ID ), '%' )
        )
        )
        WHERE
        DATA_TYPE = '充值'
        GROUP BY
        "CREATE_TIME",
        PHONE
        ) t2 ON t1."TIME" = t2."CREATE_TIME"
        ) t4
        WHERE
        t1.TIME = t2.TIME
        and t1.TIME = t3.TIME
        and t1.TIME = t4.TIME
        ORDER BY t1.TIME
    </select>

    <!-- 列表(全部) -->
    <select id="listAll" parameterType="pd" resultType="pd">
        SELECT
        *
        FROM
        FT_ACCOUNT t1,
        FT_ACCOUNT_DATA t2
        WHERE
        t1.ACCOUNT_ID = t2.USER_ID
        ORDER BY
        t1.GMT_CREATE
    </select>


    <!-- 列表(按照接点关系查所有上级) -->
    <select id="listByRePath" parameterType="pd" resultType="pd">
        select
        <include refid="Field"/>
        from
        <include refid="tableName"/>
        WHERE
        ACCOUNT_ID IN ( ${RE_PATH} )
        ORDER BY GMT_CREATE desc
    </select>

    <!-- 清空数据 -->
    <delete id="deleteAllData" parameterType="pd">
        delete from
        <include refid="tableName"/>
        where
        "ACCOUNT_ID" != '10000'
    </delete>

    <!-- 重置顶点账号信息 -->
    <update id="resetAccount" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        "RE_PATH" = '',
        "USDT_WALLET" = 10000,
        "MONEY" = 10000,
        "SHOP_INTEGRAL" = 10000,
        "RECOMMENDED_NUMBER" = 0,
        "TEAM_NUMBER" = 0,
        "ALGEBRA" = 0,
        "USER_STATE" = 1,
        "ACCOUNT_ID" = "ACCOUNT_ID"
        where
        "ACCOUNT_ID" = '10000'
    </update>

</mapper>