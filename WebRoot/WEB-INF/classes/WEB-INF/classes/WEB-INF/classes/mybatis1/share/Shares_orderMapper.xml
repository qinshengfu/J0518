<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Shares_orderMapper">

    <!--表名 -->
    <sql id="tableName">
		"FT_SHARES_ORDER"
	</sql>

    <!-- 字段 -->
    <sql id="Field">
		"GMT_CREATE",	
		"GMT_MODIFIED",	
		"PROD_NAME",	
		"PRICE",	
		"STATUS",	
		"TYPE",	
		"TOTAL",	
		"REMAINDER",	
		"NUMBER_CODE",	
		"ORI_PRICE",	
		"PHONE",	
		"HE_PHONE",	
		"SHARES_PROD_ID",	
		"EVENT",	
		"MAIN_ORDER_ID",
		"SHARES_ORDER_ID"
	</sql>

    <!-- 字段值 -->
    <sql id="FieldValue">
			#{GMT_CREATE},	
			#{GMT_MODIFIED},	
			#{PROD_NAME},	
			#{PRICE},	
			#{STATUS},	
			#{TYPE},	
			#{TOTAL},	
			#{REMAINDER},	
			#{NUMBER_CODE},	
			#{ORI_PRICE},	
			#{PHONE},	
			#{HE_PHONE},	
			#{SHARES_PROD_ID},	
			#{EVENT},	
			#{MAIN_ORDER_ID},
			#{SHARES_ORDER_ID}
	</sql>

    <!-- 新增-->
    <insert id="save" parameterType="pd">

        /* 返回 主键ID 需要手动创建对应的序列*/
        <selectKey keyProperty="SHARES_ORDER_ID" order="BEFORE" resultType="java.lang.Integer">
            select FT_SHARES_ORDER_SEQ.NEXTVAL as SHARES_ORDER_ID from DUAL
        </selectKey>

        insert into
        <include refid="tableName"/>
        (
        <include refid="Field"/>
        ) values (
        <include refid="FieldValue"/>
        )
    </insert>

    <!-- 删除-->
    <delete id="delete" parameterType="pd">
        delete from
        <include refid="tableName"/>
        where
        "SHARES_ORDER_ID" = #{SHARES_ORDER_ID}
    </delete>

    <!-- 修改 -->
    <update id="edit" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        <foreach item="item" collection="_parameter.keys"
                 separator="," close="">
            <if test="item != null and item != '' ">
                ${item} = #{[${item}]}
            </if>
        </foreach>
        where
        "SHARES_ORDER_ID" = #{SHARES_ORDER_ID}
    </update>

    <!-- 增加总数和修改价格 -->
    <update id="addTotalNumber" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        "TOTAL" = "TOTAL" + #{num},
        "PRICE" = #{PRICE},
        "ORI_PRICE" = #{PRICE}
        where
        "SHARES_ORDER_ID" = #{SHARES_ORDER_ID}
    </update>

    <!-- 增加库存 -->
    <update id="addOrderStock" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        "REMAINDER" = "REMAINDER" + #{num}
        where
        "SHARES_ORDER_ID" = #{SHARES_ORDER_ID}
    </update>

    <!-- 减少库存 -->
    <update id="lessOrderStock" parameterType="pd">
        update
        <include refid="tableName"/>
        set
        "REMAINDER" = "REMAINDER" - #{num}
        where
        "SHARES_ORDER_ID" = #{SHARES_ORDER_ID}
    </update>

    <!-- 通过ID获取数据 -->
    <select id="findById" parameterType="pd" resultType="pd">
        select
        <include refid="Field"/>
        from
        <include refid="tableName"/>
        where
        "SHARES_ORDER_ID" = #{SHARES_ORDER_ID}
    </select>

    <!-- 通过手机号获取个人持有股票商品数量 -->
    <select id="findByPhoneSharesHeldNum" parameterType="pd" resultType="pd">
        SELECT
        NVL( SUM( REMAINDER ), 0 )  as USER_SHARES_SUM
        FROM
        <include refid="tableName"/>
        WHERE
        "PHONE" = #{PHONE}
        AND "STATUS" = '持仓'
    </select>

    <!-- 通过股票商品ID获取数据和手机号查询 -->
    <select id="findBySharesProdIdAndPhone" parameterType="pd" resultType="pd">
        SELECT
        <include refid="Field"/>
        FROM
        (
        SELECT
        <include refid="Field"/>
        FROM
        <include refid="tableName"/>
        WHERE "SHARES_PROD_ID" = #{SHARES_PROD_ID} AND "PHONE" = #{PHONE} AND STATUS = '持仓' ORDER BY "GMT_CREATE"
        )
        WHERE
        ROWNUM = 1

    </select>

    <!-- 列表 -->
    <select id="datalistPage" parameterType="page" resultType="pd">
        select
        <include refid="Field"/>
        from
        <include refid="tableName"/>
        where 1=1
        <if test="pd.keywords!= null and pd.keywords != ''"><!-- 关键词检索 -->
            and
            (
            <!--	根据需求自己加检索条件  -->
                "PROD_NAME" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
                 or
                "PRICE" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
                 or
                "STATUS" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
                 or
                "TYPE" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
                 or
                "TOTAL" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
                 or
                "REMAINDER" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
                 or
                "PHONE" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
                 or
                "EVENT" LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
            )
        </if>
        /*时间段搜索*/
        <if test="pd.lastStart != null and pd.lastStart != '' ">
            and "GMT_CREATE" &gt;= #{pd.lastStart}
        </if>
        <if test="pd.lastEnd!= null and pd.lastEnd != '' ">
            and "GMT_CREATE" &lt;= ( SELECT TO_CHAR(( SELECT to_date( #{pd.lastEnd}, 'yyyy-mm-dd' ) + 1 FROM dual ),
            'yyyy-mm-dd' ) FROM dual )
        </if>
        ORDER BY "GMT_CREATE" DESC
    </select>

    <!-- 列表(全部) -->
    <select id="listAll" parameterType="pd" resultType="pd">
        select
        <include refid="Field"/>
        from
        <include refid="tableName"/>
    </select>

    <!-- 列表(根据用户手机号查询所有持有股票) -->
    <select id="listByPhone" parameterType="pd" resultType="pd">
        SELECT
            *
        FROM
            FT_SHARES_ORDER t1,
            FT_SHARES_PROD t2
        WHERE
            t1.SHARES_PROD_ID = t2.SHARES_PROD_ID
            AND t1.PHONE = #{PHONE}
            AND t1.STATUS != '已取消'
        order by t1.GMT_CREATE desc
    </select>

    <!-- 列表(买入/卖出订单各一条) -->
    <select id="listBuyAndSell" parameterType="pd" resultType="pd">
        SELECT
            *
        FROM
            (
        SELECT
            ROW_NUMBER () OVER ( PARTITION BY t2.TYPE ORDER BY t2.GMT_CREATE ) rn2,
            t2.*
        FROM
            (
        SELECT
            *
        FROM
            (
        SELECT
            ROW_NUMBER () OVER ( PARTITION BY t1.PHONE ORDER BY t1.TYPE ) rn1,
            t1.*
        FROM
            FT_SHARES_ORDER t1
        WHERE
            t1.STATUS = '交易中'
            AND t1.ORI_PRICE >= ( SELECT MIN( ORI_PRICE ) FROM FT_SHARES_ORDER WHERE "STATUS" = '交易中' AND "TYPE" = #{TYPE} )
            AND t1.PROD_NAME = (
        SELECT
            PROD_NAME
        FROM
            FT_SHARES_ORDER
        WHERE
            ORI_PRICE = ( SELECT MIN( ORI_PRICE ) AS minPrice FROM FT_SHARES_ORDER WHERE "STATUS" = '交易中' AND "TYPE" = #{TYPE} )
            AND "STATUS" = '交易中'
            AND "TYPE" = #{TYPE}
            AND ROWNUM = 1
            )
            )
        WHERE
            rn1 = 1
            ) t2
            )
        WHERE
            rn2 = 1
    </select>

    <!-- 列表(获取最近10个买卖订单) -->
    <select id="listByBuyAndSellOrder" parameterType="pd" resultType="pd">
        SELECT
        *
        FROM
        (
        SELECT
        ROW_NUMBER () OVER ( PARTITION BY t1.TYPE ORDER BY t1.GMT_CREATE ) rn1,
        t1.*
        FROM
        FT_SHARES_ORDER t1
        WHERE
        t1.STATUS != '已取消'
        AND t1.EVENT = '等待系统匹配'
        AND t1.SHARES_PROD_ID = #{SHARES_PROD_ID}
        AND （t1.TYPE = '买入' OR t1.TYPE = '卖出'）
        )
        WHERE
        rn1 &lt;= 5
    </select>

    <!-- 批量删除 -->
    <delete id="deleteAll" parameterType="String">
        delete from
        <include refid="tableName"/>
        where
        "SHARES_ORDER_ID" in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

</mapper>